//
//  ParameterSelectioinViewController.swift
//  PollutionApp
//
//  Created by Łukasz Drożdż on 01.08.2018.
//  Copyright (c) 2018 Łukasz Drożdż. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ParameterSelectioinDisplayLogic: class
{
  func displaySomething(viewModel: ParameterSelectioin.Something.ViewModel)
  func presentParameters()
  func presentError(forError description: String)
  func presentStatistics()
}

class ParameterSelectioinViewController: UIViewController, ParameterSelectioinDisplayLogic
{
  
  //MARK: Outlets
  
  @IBOutlet weak var tableView: UITableView!
  
  
  // MARK: Properties
  
  var interactor: ParameterSelectioinBusinessLogic?
  var router: (NSObjectProtocol & ParameterSelectioinRoutingLogic & ParameterSelectioinDataPassing)?
  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ParameterSelectioinInteractor()
    let presenter = ParameterSelectioinPresenter()
    let router = ParameterSelectioinRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    registerNib()
    interactor?.displayParams()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = ParameterSelectioin.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: ParameterSelectioin.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
  
  func presentParameters() {
    tableView.reloadData()
  }
  
  func presentError(forError description: String) {
    router?.navigateToAlert(withError: description)
  }
  
  func presentStatistics() {
    router?.navigateToParameterStats()
  }
}

extension ParameterSelectioinViewController: UITableViewDataSource, UITableViewDelegate {
  
  fileprivate func registerNib() {
    tableView.register(UINib(nibName: ParametersTableViewCell.CellIdentifier, bundle: nil), forCellReuseIdentifier: ParametersTableViewCell.CellIdentifier)
  }
  
  func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    guard let sensors = router?.dataStore?.sensors else {
      return 0
    }
    return sensors.count
  }
  
  func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    
    guard let sensors = router?.dataStore?.sensors else {
      return UITableViewCell()
    }
    
    let cell = tableView.dequeueReusableCell(withIdentifier: ParametersTableViewCell.CellIdentifier, for: indexPath) as! ParametersTableViewCell
    cell.parameter = sensors[indexPath.row]
    return cell
  }
  
  func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    guard let sensors = router?.dataStore?.sensors else {
      return
    }
     // Segue animation was not triggered correctly without this method
    tableView.deselectRow(at: indexPath, animated: false)
    interactor?.fetchSurveyData(forSensor: sensors[indexPath.row])
   
    
  }
}
