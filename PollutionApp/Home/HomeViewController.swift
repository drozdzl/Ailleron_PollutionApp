//
//  HomeViewController.swift
//  PollutionApp
//
//  Created by Łukasz Drożdż on 30.07.2018.
//  Copyright (c) 2018 Łukasz Drożdż. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class
{
	func presentAlert(forError error: String)
	func presentSuccess()
	func presentSensorsSuccess()
}

class HomeViewController: UIViewController, HomeDisplayLogic, StationSelectionDelegate
{
	// MARK: Outlets
	
	@IBOutlet weak var tableVIew: UITableView!
	@IBOutlet weak var searchTextField: UITextField!
	
	// MARK: Properties
	
	var interactor: HomeBusinessLogic?
	var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
	
	var isSearchActive: Bool = false
	
	// MARK: Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
	{
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder)
	{
		super.init(coder: aDecoder)
		setup()
	}
	
	// MARK: Setup
	
	private func setup()
	{
		let viewController = self
		let interactor = HomeInteractor()
		let presenter = HomePresenter()
		let router = HomeRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	
	override func prepare(for segue: UIStoryboardSegue, sender: Any?)
	{
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}
	
	// MARK: View lifecycle
	
	override func viewDidLoad()
	{
		super.viewDidLoad()
		registerNib()
		interactor?.fetchAllStations()
        searchTextField.delegate = self
	}
	
	// MARK: Action
	
	func didSelectStation(_ station: Station) {
		interactor?.fetchSensors(forStation: station)
	}
	
	// MARK: View presentation
	
	func presentSuccess() {
		// The data is assigned, now just reload 
		tableVIew.reloadData()
	}

    func presentAlert(forError error: String) {
		router?.navigateToAlert(withError: error)
	}
	
	func presentSensorsSuccess() {
		router?.navigateToParemeterSelection()
	}
}

extension HomeViewController: UITableViewDelegate, UITableViewDataSource {
	
	fileprivate func registerNib() {
		tableVIew.register(UINib(nibName: CitySelectionTableViewCell.CellIdentifier, bundle: nil), forCellReuseIdentifier: CitySelectionTableViewCell.CellIdentifier)
	}
	
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		guard let cities = router?.dataStore?.cities else {
			return 0
		}
		
		guard let searchedCities = router?.dataStore?.searchedCities else {
			return 0
		}
		return isSearchActive ? searchedCities.count : cities.count
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		
		// Get cities from data store, otherwise return empty cell
		guard let cities = router?.dataStore?.cities else {
			return UITableViewCell()
		}
		
		// Get searched cities
		guard let searchedCities = router?.dataStore?.searchedCities else {
			return UITableViewCell()
		}
		
		let cell = tableVIew.dequeueReusableCell(withIdentifier: CitySelectionTableViewCell.CellIdentifier, for: indexPath) as! CitySelectionTableViewCell
		let city = isSearchActive ? searchedCities[indexPath.row] : cities[indexPath.row]
		cell.city = city
		
		return cell
	}
	
	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		
		guard let cities = router?.dataStore?.cities,
			let searchedCities = router?.dataStore?.searchedCities else {
			return
		}
	
		let city = isSearchActive ? searchedCities[indexPath.row] : cities[indexPath.row]
		interactor?.stationsFor(selectedCity: city)
		router?.navigateToStationSelection()
		// Segue animation was not triggered correctly without this method 
		tableView.deselectRow(at: indexPath, animated: false)

	}
}

extension HomeViewController: UITextFieldDelegate {

	@IBAction func editingChanged(_ sender: UITextField) {
		isSearchActive = (sender.text != nil && !sender.text!.isEmpty)
		interactor?.searchForCity(withName: sender.text)
	}
}

