//
//  StatisticsViewController.swift
//  PollutionApp
//
//  Created by Łukasz Drożdż on 01.08.2018.
//  Copyright (c) 2018 Łukasz Drożdż. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Charts

protocol StatisticsDisplayLogic: class
{
    func displaySomething(viewModel: Statistics.Something.ViewModel)
  func displayChart(forData data: LineChartData?)
}

class StatisticsViewController: UIViewController, StatisticsDisplayLogic
{
    
    //MARK: Outlets
    
    @IBOutlet weak var alertView: UIView!
    @IBOutlet weak var lineChart: LineChartView!
    
    // MARK: Properties
    
    var interactor: StatisticsBusinessLogic?
    var router: (NSObjectProtocol & StatisticsRoutingLogic & StatisticsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = StatisticsInteractor()
        let presenter = StatisticsPresenter()
        let router = StatisticsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
        interactor?.displayStatistcs()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        animateAlertView()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Statistics.Something.Request()
        interactor?.doSomething(request: request)
    }
    @IBAction func screenTapped(_ sender: Any) {
        animateOnDismiss()
    }
    
    func displaySomething(viewModel: Statistics.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
  func displayChart(forData data: LineChartData?) {
    guard let data = data else {
      return
    }
      lineChart.data = data
      lineChart.data?.setDrawValues(false)
      lineChart.chartDescription?.text = nil

    }
    
    // MARK: View Customization
    
    func animateAlertView() {
        alertView.layer.cornerRadius = 20
        alertView.transform = CGAffineTransform.identity.scaledBy(x: 0.5, y: 0.5)
        self.view.alpha = 0
        alertView.isHidden = false
        
        UIView.animate(withDuration: 0.5, animations: {
            self.alertView.transform = CGAffineTransform.identity.scaledBy(x: 1, y: 1)
            self.view.alpha = 1
        })
    }
    
    func animateOnDismiss() {
        UIView.animate(withDuration: 0.3, animations: {
            
            self.view.alpha = 0
            self.alertView.transform = CGAffineTransform.identity.scaledBy(x: 0.01, y: 0.01)
        }, completion: { (value: Bool) in
            self.dismiss(animated: true, completion: nil)
        })
    }
    
    func displaySomething(viewModel: StationSelection.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

